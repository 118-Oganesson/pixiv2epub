# このファイルを `config.toml` としてコピーし、環境に合わせて設定値を変更してください。

# ------------------------------------------------------------------------------
# ダウンローダー設定
# ------------------------------------------------------------------------------
[downloader]
# ダウンロードした小説データや画像の一時保存先ディレクトリ
save_directory = "./pixiv_raw"

# 単独作品の保存フォルダ構成。
# 使用可能変数: {id}, {title}, {author_name}
raw_dir_template = "{author_name}/{id}_{title}"

# シリーズ作品の保存フォルダ構成。
# 使用可能変数: {id}, {title}, {author_name}
series_dir_template = "{author_name}/series_{id}_{title}"

# Pixiv APIへのリクエスト間隔 (秒)。サーバー負荷を軽減するために設定します。
api_delay = 1.0

# APIリクエスト失敗時の最大リトライ回数
api_retries = 3

# true の場合、ダウンロード先に同名ファイルがあっても常に上書き保存します。
overwrite_existing_images = false


# ------------------------------------------------------------------------------
# EPUBビルダー設定
# ------------------------------------------------------------------------------
[builder]
# 生成されたEPUBファイルの出力先ディレクトリ
output_directory = "./epubs"

# 単独作品のEPUBファイル名とフォルダ構成。
# 使用可能変数: {author_name}, {title}
filename_template = "{author_name}/{title}.epub"

# シリーズ作品のEPUBファイル名とフォルダ構成。
# 使用可能変数: {author_name}, {series_title}, {title}
series_filename_template = "{author_name}/{series_title}/[{author_name}] {series_title} - {title}.epub"

# EPUBに適用するCSSファイルへのパス (一時保存先ディレクトリからの相対パス)
css_file = "styles/style.css"

# trueに設定すると、EPUB生成後にダウンロードした生データ（中間ファイル）を自動的に削除します。
# コマンドラインで --cleanup または --no-cleanup を指定すると、この設定は上書きされます。
cleanup_after_build = false

# ------------------------------------------------------------------------------
# 認証設定
# ------------------------------------------------------------------------------
[auth]
# Pixivの `refresh_token` を設定します。
# セキュリティのため、このファイルに直接書き込まず、環境変数 `PIXIV_REFRESH_TOKEN` で設定することを強く推奨します。
refresh_token = "your_refresh_token_here"


# ------------------------------------------------------------------------------
# 画像圧縮設定
# ------------------------------------------------------------------------------
[compression]
# true にすると、ダウンロードした画像を圧縮してEPUBファイルのサイズを削減します。
enabled = true

# true の場合、圧縮によってファイルサイズが増加する画像は、圧縮前のオリジナルファイルを使用します。
skip_if_larger = true

# 画像圧縮を並列処理する際の最大ワーカー数。CPUコア数に合わせると効果的です。
max_workers = 4

# --- pngquant (PNG画像) の圧縮設定 ---
[compression.pngquant]
colors = 256          # 減色後の最大色数 (2-256)
quality = "65-90"     # 圧縮品質 (min-max, 0-100)
speed = 3             # 圧縮速度 (1-11)。高いほど速いが品質は低下
strip = true          # メタデータを削除するか

# --- jpegoptim (JPEG画像) の圧縮設定 ---
[compression.jpegoptim]
max_quality = 85      # 最大圧縮品質 (0-100)。画質をこの値以下に抑える
strip_all = true      # すべてのメタデータ (コメント, Exif, etc.) を削除するか
progressive = true    # プログレッシブJPEGを生成するか
preserve_timestamp = true # 元ファイルのタイムスタンプを維持するか

# --- cwebp (WebP画像) の圧縮設定 ---
[compression.cwebp]
quality = 75          # 圧縮品質 (0-100)。非可逆圧縮時に使用
lossless = false      # 可逆圧縮モードを有効にするか
metadata = "none"     # 保持するメタデータ (all, none, exif, icc, xmp)