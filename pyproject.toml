[project]
name = "pixiv2epub"
version = "0.1.0"
description = "A tool to download novels from Pixiv and convert them into EPUB format."
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "jinja2>=3.1.6",
    "pixivpy3>=3.7.5",
    "rich>=14.2.0",
    "pydantic-settings>=2.11.0",
    "canonicaljson>=2.0.0",
    "playwright>=1.55.0",
    "requests>=2.32.5",
    "poethepoet>=0.37.0",
    "loguru>=0.7.3",
    "typer>=0.20.0",
    "python-dotenv>=1.2.1",
    "pybreaker>=1.4.1",
    "types-requests>=2.32.4.20250913",
]
[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "ipykernel>=7.0.1",
    "mypy>=1.18.2",
    "ruff>=0.14.2",
    "vulture>=2.14",
]

[project.scripts]
piep = "pixiv2epub.entrypoints.cli:app"

# --- ビルドシステムの定義 ---
[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

# --- poethepoetのタスク定義 ---
[tool.poe.tasks]
setup = [
    { cmd = "playwright install-deps" },
    { cmd = "playwright install" },
    { cmd = "uv pip install -e ." },
]
build = [{ cmd = "uv pip install -e ." }]

# Ruffによるフォーマット
format = "ruff format src"

# RuffによるLint（自動修正なし）
lint = "ruff check src"

# RuffによるLint（自動修正あり）
lint-fix = "ruff check src --fix"

# Mypyによる型チェック
typecheck = "mypy src"

# Banditによるセキュリティスキャン
security = "bandit -c pyproject.toml -r src"

# Vultureによるデッドコード検出
deadcode = "vulture src whitelist.py"

# --- 統合タスク ---

# コードの自動修正とフォーマットをまとめて実行
fix = ["lint-fix", "format"]

# Lint、型チェック、セキュリティスキャンをまとめて実行
check = ["lint", "typecheck", "security"]

# --- アプリケーションのデフォルト設定 ---
[tool.pixiv2epub.workspace]
root_directory = "./.workspace"

[tool.pixiv2epub]
[tool.pixiv2epub.downloader]
api_delay = 1.0
api_retries = 3
overwrite_existing_images = false

[tool.pixiv2epub.downloader.circuit_breaker]
fail_max = 5
reset_timeout = 60

[tool.pixiv2epub.builder]
output_directory = "./epubs"
filename_template = "{author_name}/{title}.epub"
series_filename_template = "{author_name}/{series_title}/{title}.epub"
max_filename_length = 50
cleanup_after_build = false

[tool.pixiv2epub.compression]
enabled = true
skip_if_larger = true
max_workers = 4

[tool.pixiv2epub.compression.pngquant]
colors = 256
quality = "65-90"
speed = 3
strip = true

[tool.pixiv2epub.compression.jpegoptim]
max_quality = 85
strip_all = true
progressive = true
preserve_timestamp = true

[tool.pixiv2epub.compression.cwebp]
quality = 75
lossless = false
metadata = "none"

# --- Code Quality Toolchain (Ruff, Vulture, Mypy, Bandit) ---

[tool.ruff]
src = ["src"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
line-length = 88
target-version = "py313"

[tool.ruff.lint]
select = ["E", "W", "F", "I", "B", "UP", "ANN", "RUF"]
ignore = ["E501", "ANN204"]

[tool.ruff.lint.per-file-ignores]
"src/pixiv2epub/__init__.py" = ["F401"]

[tool.ruff.format]
quote-style = "single"
docstring-code-format = true

[tool.vulture]
paths = ["src", "whitelist.py"]
min_confidence = 80
sort_by_size = true
exclude = [".venv/", "*/settings.py"]

[tool.mypy]
strict = true
mypy_path = "src"
show_error_codes = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = "pixivpy3.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "cloudscraper.*"
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = [".venv", "tests"]
skips = ["B101", "B404", "B603"]
